//Implimentation of Adjacency List for Graphs
#include<iostream>
#include<list> // it's the STL library for list implementation in C++
#include<iterator> // it's basically like pointer that points towards the element in list or container
using namespace std;

void displayAdjList(list<int>adj_list[],int v) // here list is data type of adj. list <int> is specifing the type of data it holds
{
    for(int i=0;i<v;i++)
    {
        cout<<i<<"--->";
        list<int>::iterator it; //"it" is going to point towards the element
        for(it=adj_list[i].begin(); it!=adj_list[i].end();++it)
        {
            cout<<*it<<" ";
        }
        cout<<endl;
    }

}

void add_edge(list<int>adj_list[],int u,int v)
{
    // add v into the list u,and u into list v
    adj_list[u].push_back(v);
    adj_list[v].push_back(u);
}
 
main(int argc,char* argv[])
{
    int v=6; //take example graph of 6 vertices
    //create an array of lists whose size is 6
    list<int>adj_list[v];
    add_edge(adj_list,0,4);
    add_edge(adj_list,0,3);
    add_edge(adj_list,1,2);
    add_edge(adj_list,1,4);
    add_edge(adj_list,1,5);
    add_edge(adj_list,2,3);
    add_edge(adj_list,2,5);
    add_edge(adj_list,5,3);
    add_edge(adj_list,5,4);
    displayAdjList(adj_list,v);

}
